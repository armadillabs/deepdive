#!/usr/bin/env bash
# deepdive-initdb -- Initializes the underlying database for the DeepDive application
# > deepdive initdb
# Initializes the whole database.
#
# > deepdive initdb TABLE
# Initializes the given table.
##
set -eu

# find the current application
DEEPDIVE_APP=$(find-deepdive-app)
export DEEPDIVE_APP
cd "$DEEPDIVE_APP"

. load-db-driver.sh

# make sure database is created based on the database type
#db-init "$@"

# create schema
DEEPDIVE_SCHEMA=${DEEPDIVE_SCHEMA:-}
if [ -n "$DEEPDIVE_SCHEMA" ]; then
  deepdive-sql "CREATE SCHEMA $DEEPDIVE_SCHEMA;"
fi

generate_schema_json() {
    tmp=$(mktemp -d "${TMPDIR:-/tmp}"/deepdive-initdb.XXXXXXX)
    trap 'rm -rf "$tmp"' EXIT
    schema_json="$tmp"/schema.json
    ddlog export-schema app.ddlog > "$schema_json"
}

# if a list of table names given, initialize corresponding tables
if [[ $# -gt 0 ]]; then
    [[ -e app.ddlog ]] || error "deepdive initdb TABLE is only available for ddlog applications"
    generate_schema_json
    for t in "$@"; do
        schema_json_to_sql $schema_json $t | deepdive-sql
        if [[ -x input/init_$t.sh ]]; then
            input/init_$t.sh
        fi
    done
else # no arguments given, init database
    if [[ -e app.ddlog ]]; then
        generate_schema_json
        schema_json_to_sql $schema_json | deepdive-sql
    elif [[ -e schema.sql ]]; then
        db-prompt <schema.sql
    fi
    ! [[ -x input/init.sh ]] || {
        # XXX set the legacy environment variables
        export APP_HOME=$DEEPDIVE_APP
        input/init.sh "$@"
    }
fi
